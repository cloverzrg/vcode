package vcode

import "strconv"

func charStr(m map[int]map[int]int, x int) (str string) {
	str = ""
	y := 4
	width := 9
	height := 12
	for i := y; i < y+height; i++ {
		for j := x; j < x+width; j++ {
			str += strconv.Itoa(m[i][j])
		}
	}
	return str
}

func GetVCodeFromMap(m map[int]map[int]int) string {
	str1 := charStr(m, 4)
	vcode1 := match(str1)
	str2 := charStr(m, 14)
	vcode2 := match(str2)
	str3 := charStr(m, 24)
	vcode3 := match(str3)
	str4 := charStr(m, 34)
	vcode4 := match(str4)
	return vcode1 + vcode2 + vcode3 + vcode4
}

//keySet.push({ key: '2', str: '001111000011111100111000110110000110000000110000001100000011100000111000001110000011000000111111110111111110' })
//keySet.push({ key: 'b', str: '110000000110000000110000000110111000111111100111001110110000110110000110110000110111001110111111100110111000' })
//keySet.push({ key: 'v', str: '000000000000000000000000000110001100110001100110001100011011000001011000011011000001110000001110000001110000' })
//keySet.push({ key: 'n', str: '000000000000000000000000000110111100111111110111000110110000110110000110110000110110000110110000110110000110' })
//keySet.push({ key: 'z', str: '000000000000000000000000000111111100111111100000011000000111000001110000011100000011000000111111100111111100' })
//keySet.push({ key: '1', str: '000110000001110000011110000110110000100110000000110000000110000000110000000110000000110000000110000000110000' })
//keySet.push({ key: 'x', str: '000000000000000000000000000110001100111011100011001000001110000001110000001110000011011000111011100110001100' })
//keySet.push({ key: '3', str: '001111100011111110110000110000000110000111100000111100000001110000000110110000110111001110011111100001111000' })
//keySet.push({ key: 'm', str: '000000000000000000000000000110111001111111111111001110110001100110001100110001100110001100110001100110001100' })
//keySet.push({ key: 'c', str: '000000000000000000000000000001111000011111100111001100110000000110000000110000000111001100011111000001111000' })
func match(str string) (key string) {
	matchMap := make(map[string]string)
	matchMap["2"] = "001111000011111100111000110110000110000000110000001100000011100000111000001110000011000000111111110111111110"
	matchMap["b"] = "110000000110000000110000000110111000111111100111001110110000110110000110110000110111001110111111100110111000"
	matchMap["v"] = "000000000000000000000000000110001100110001100110001100011011000001011000011011000001110000001110000001110000"
	matchMap["n"] = "000000000000000000000000000110111100111111110111000110110000110110000110110000110110000110110000110110000110"
	matchMap["z"] = "000000000000000000000000000111111100111111100000011000000111000001110000011100000011000000111111100111111100"
	matchMap["1"] = "000110000001110000011110000110110000100110000000110000000110000000110000000110000000110000000110000000110000"
	matchMap["x"] = "000000000000000000000000000110001100111011100011001000001110000001110000001110000011011000111011100110001100"
	matchMap["3"] = "001111100011111110110000110000000110000111100000111100000001110000000110110000110111001110011111100001111000"
	matchMap["m"] = "000000000000000000000000000110111001111111111111001110110001100110001100110001100110001100110001100110001100"
	matchMap["c"] = "000000000000000000000000000001111000011111100111001100110000000110000000110000000111001100011111000001111000"

	key = "U"
	max := 0
	for key2, val := range matchMap {
		cur := 0
		for i := 0; i < 108; i++ {
			if val[i] == str[i] {
				cur++
			}
		}
		if cur > max {
			key = key2
			max = cur
		}
	}
	return key

}
